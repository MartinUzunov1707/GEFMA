<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>